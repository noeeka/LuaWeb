user  root;
worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    #access_log  logs/access.log  main;
    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
	client_max_body_size 50m;

    #gzip  on;

    server {
        listen  80;
        listen       [::]:80;
        server_name  ADT;
        #charset koi8-r;
        #access_log  logs/host.access.log  main;
        location / {
            root /var/www/html;
            index  index.php index.html index.htm;
        }

        location = /favicon.ico {
          log_not_found off;
        }

        location ~ /rings {
          root /usr/share/music;
        }

        location /uptime {
            default_type text/html;
            content_by_lua '
                ngx.header.content_type="text/html;charset=utf8"
                file = io.popen("uptime")
                data = file:read()
                file:close()
                ngx.say("<p>"..data.."</p>")
            ';
        }

        location ~ /action/(\w+) {
            resolver 8.8.8.8;
            default_type text/html;
            content_by_lua_block {
              local sock = ngx.socket.tcp()
              local ok, err = sock:connect("www.baidu.com", 80) 
              if not ok then
              	ngx.say("failed to connect to baidu: ", err)
                return
              end 
              ngx.say("successfully connected to baidu!")
              sock:close()
            }
        }

		location = /api/call {
            resolver 8.8.8.8;
            default_type text/html;
            content_by_lua_block {
                json = require('json')
                local data = {status=1}
                --if nil == ngx.var.http_cookie then
                --    ngx.say(json.encode(data))
                --    return
                --end
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                if not data then
                   data = {status=1}
                   ngx.say(json.encode(data))
                   return
                end
                local data_unpack = json.decode(data)
                local sock = ngx.socket.tcp()
                local ok, err = sock:connect("127.0.0.1", 10086)
                if not ok then
                    data = {status=1, msg="failed to connect to voip server", err=err}
                    ngx.say(json.encode(data))
                    return
                end
                sock:settimeout(1000)
                local bytes, err = sock:send("AT+B CALL_MANAGER "..data_unpack.dest.."\r\n")
                sock:close()
                data = {status=0, bytes=bytes, err=err}
                ngx.say(json.encode(data))
            }
        }
        location = /api/hangup {
            resolver 8.8.8.8;
            default_type text/html;
            content_by_lua_block {
                json = require('json')
                local data = {status=1}
                --if nil == ngx.var.http_cookie then
                --    ngx.say(json.encode(data))
                --    return
                --end
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                if not data then
                   data = {status=1}
                   ngx.say(json.encode(data))
                   return
                end
                local data_unpack = json.decode(data)
                local sock = ngx.socket.tcp()
                local ok, err = sock:connect("127.0.0.1", 10086)
                if not ok then
                    data = {status=1, msg="failed to connect to voip server", err=err}
                    ngx.say(json.encode(data))
                    return
                end
                sock:settimeout(1000)
                local bytes, err = sock:send("AT+B HANG_UP\r\n")
                sock:close()
                data = {status=0, bytes=bytes, err=err}
                ngx.say(json.encode(data))
            }
        }
        location = /api/answer {
            resolver 8.8.8.8;
            default_type text/html;
            content_by_lua_block {
                json = require('json')
                local data = {status=1}
                --if nil == ngx.var.http_cookie then
                --    ngx.say(json.encode(data))
                --    return
                --end
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                if not data then
                   data = {status=1}
                   ngx.say(json.encode(data))
                   return
                end
                local data_unpack = json.decode(data)
                local sock = ngx.socket.tcp()
                local ok, err = sock:connect("127.0.0.1", 10086)
                if not ok then
                    data = {status=1, msg="failed to connect to voip server", err=err}
                    ngx.say(json.encode(data))
                    return
                end
                sock:settimeout(1000)
                local bytes, err = sock:send("AT+B ANSWER\r\n")
                sock:close()
                data = {status=0, bytes=bytes, err=err}
                ngx.say(json.encode(data))
            }
        }
		
        location ~ /api/system {
                    default_type text/html;
                    content_by_lua_block {

                      args = ngx.req.get_uri_args()
                      local version=""
                      local msg=""

                      file = io.popen("ifconfig")
                      mac = file:read()
                      file:close()
                      for x in string.gmatch(mac, "([0-9A-Fa-f][0-9A-Fa-f]:[0-9A-Fa-f][0-9A-Fa-f]:[0-9A-Fa-f][0-9A-Fa-f]:[0-9A-Fa-f][0-9A-Fa-f]:[0-9A-Fa-f][0-9A-Fa-f]:[0-9A-Fa-f][0-9A-Fa-f])") do
                          mac = x
                      end

                      --gFile = io.open("/usr/local/nginx/lua/common.lua" ,"w");
                      --gFile:write("#! /usr/bin/env lua")
                      --gFile:close()

                      local fileVersion = assert(io.open("/etc/VERSION", 'r'))
                      version = fileVersion:read()
                      fileVersion:close()
                      msg='{"mac":"'..mac..'","version":"'..version..'"}'
                      ngx.say(msg)
                    }
                }
        location ~ /api/login{
                        default_type text/html;
                        content_by_lua_file /usr/local/nginx/conf/lua/login.lua;
                    }
        location ~ /api/logout{
            default_type text/html;
            content_by_lua_file /usr/local/nginx/conf/lua/logout.lua;
        }
        location ~ /api/ringtone{
	        default_type text/html;
            content_by_lua_file /usr/local/nginx/conf/lua/ringtone.lua;
        }

 location ~ /api/address{
            default_type text/html;
content_by_lua_file /usr/local/nginx/conf/lua/address.lua;
        }
 location ~ /api/led{
                default_type text/html;
content_by_lua_file /usr/local/nginx/conf/lua/led.lua;
            }
 location ~ /api/lift{
                 default_type text/html;
content_by_lua_file /usr/local/nginx/conf/lua/lift.lua;
             }
 location ~ /api/datetime{
                  default_type text/html;
content_by_lua_file /usr/local/nginx/conf/lua/datetime.lua;
              }
  location ~ /api/language{
                   default_type text/html;
content_by_lua_file /usr/local/nginx/conf/lua/language.lua;
               }
location ~ /api/sip {
	default_type text/html;
	content_by_lua_file /usr/local/nginx/conf/lua/sip.lua;
}
location ~ /api/bluetooth{
                   default_type text/html;
content_by_lua_file /usr/local/nginx/conf/lua/bluetooth.lua;
               }
location ~ /api/administrator{
                   default_type text/html;
content_by_lua_file /usr/local/nginx/conf/lua/administrator.lua;
               }
				location ~ /api/password {
					default_type text/html;
					content_by_lua_file /usr/local/nginx/conf/lua/password.lua;
				}

location ~ /api/systemtest{
                   default_type text/html;
                   content_by_lua_block{
                       local request_method = ngx.var.request_method
                       local args = nil
                       local param = nil
                       local sqlite3 = require("lsqlite3")
                       local db=sqlite3.open("/usr/share/adt.db")
                       local json = require("json")

                       if "GET" == request_method then
                           args = ngx.req.get_uri_args()
                           local getInfo=nil
                           for row in db:nrows("SELECT item FROM config where name='system'") do
                               getInfo =row.item
                           end
                           ngx.say(getInfo)
                       elseif "POST" == request_method then
                           ngx.req.read_body()
                           args = ngx.req.get_post_args()
                           param = '{"address":"'..args["address"]..'","ip":"'..args["ip"]..'","mac":"'..args["mac"]..'","version":"'..args["version"]..'"}'
                           local result=db:exec("UPDATE config SET item='"..param.."' WHERE name='system'")
                           local msg = ""
                      		if(result==0) then
                      		    msg='{"api":"/api/system","state":0,"msg":"ok"}'
                      	    else
                      	        msg='{"api":"/api/system","state":1,"msg":"unknown error"}'

                      	    end
                      	    ngx.say(msg)
                       end
                       db:close()
                   }
               }



        location /sqlite3 {
            default_type text/html;
            content_by_lua_block {
                ngx.header.content_type="text/html;charset=utf8"
                local sqlite3 = require("lsqlite3")
                local db = sqlite3.open("/usr/share/database.db")
                data = ""
                for row in db:nrows("SELECT * FROM users;") do
                    data = data .. "user: " .. row.name .. ", password: " .. row.password .. "</br>"
                end
                db:close()
                ngx.say("<p>"..data.."</p>")
            }
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            #root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
